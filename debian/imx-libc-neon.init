#! /bin/sh
### BEGIN INIT INFO
# Provides:          imx-libc-neon
# Required-Start:    mountdevsubfs
# X-Start-Before:    hostname keymap keyboard-setup procps pcmcia hwclock hwclockfirst hdparm hibernate-cleanup lvm2
# Required-Stop:     
# Default-Start:     2 3 4 5 S
# Default-Stop:      0 1 6
# Short-Description: Preload the libc-neon library
# Description:       Use LD_PRELOAD mechanism to preload NEON-optimized
#                    replacement glibc routines.
### END INIT INFO

PATH=/sbin:/bin  # No remote fs at start
LIBC_NEON=/lib/libc-neon.so
ETC_LD_PRELOAD=/etc/ld.so.preload
CPUINFO=/proc/cpuinfo
NAME=imx-libc-neon
DESC="libc-neon"
[ -r /etc/default/imx-libc-neon ] && . /etc/default/imx-libc-neon
. /lib/init/vars.sh

. /lib/lsb/init-functions

# We take the special measure of requiring preloading
# to be enabled by setting an environment variable.
case "$PRELOAD_IMX_LIBC_NEON" in
  [Nn]*)
yy	exit 0
	;;
esac

# Even if it's enabled, we disable it on TO2 systems, 
# because the NEON unit is broken
if [ "`grep -c neon $CPUINFO`" != 1 ]; then
    exit 0
fi

SCRIPTNAME=${0##*/}
SCRIPTNAME=${SCRIPTNAME#[SK]??}

ACTION="$1"
case "$ACTION" in
  start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Preloading $NAME"
        [ ! -f $ETC_LD_PRELOAD ] && touch $ETC_LD_PRELOAD
        if [ "`grep -c '^$$LIBC_NEON$' $ETC_LD_PRELOAD`" != 1 ]; then
            echo $LIBC_NEON >>$ETC_LD_PRELOAD
        fi
        [ "$VERBOSE" != no ] && log_end_msg 0
        exit 0
        ;;
  stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Disabling preloading of $NAME"
        if [ -f $ETC_LD_PRELOAD ]; then
            grep -v "$LIBC_NEON" $ETC_LD_PRELOAD >$ETC_LD_PRELOAD.new
            mv $ETC_LD_PRELOAD.new $ETC_LD_PRELOAD
        fi
        [ "$VERBOSE" != no ] && log_end_msg 0
        exit 0
	;;
  restart|force-reload)
	;;
  status)
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
	exit 3
	;;
esac

